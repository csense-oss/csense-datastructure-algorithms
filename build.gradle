buildscript {

    ext.coroutinesVersion = "1.3.8"
    ext.junit5Version = "5.6.1"
    ext.csenseAnnotationVersion = "0.0.40"
    ext.useCsenseVersion = "0.0.42"
    ext.useCsenseTestsVersion = "0.0.40"


    //library settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"
    ext.csenseVersionName = "0.0.40"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin-datastructure-algorithms"
    ext.csenseGithub = "csense-oss/csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-datastructure-algorithms"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-datastructure-algorithms.git"
    ext.csenseArtifactDescription = ""
    //end library settings
}


plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.jetbrains.dokka' version '0.10.0'
    id "maven-publish"
    id "jacoco"
    id 'kotlinx.benchmark' version "0.2.0-dev-5"
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/csense-oss/maven" }
    maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
}

kotlin {
    explicitApi = 'strict'
    jvm()
    js(LEGACY) {
        browser {
        }
        nodejs {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin:$useCsenseVersion"
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-tests:$useCsenseTestsVersion"
            }
        }
        jvmMain {
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlin:kotlin-reflect"
            }
        }

        jsMain {

        }
        jsTest {

        }
        all {
            languageSettings.enableLanguageFeature("InlineClasses")
        }
    }
}

kotlin.sourceSets.all {
    languageSettings.progressiveMode = true
}

jvmTest {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}
jacoco {
    toolVersion = "0.8.5"
}


task docJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {

    outputFormat = 'javadoc'

    outputDirectory = "$buildDir/doc_jvm"

    impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ["jvmTest"]) {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
    }
    classDirectories.setFrom(files("${project.buildDir}/classes/kotlin/jvm/main"))
    executionData(file("${buildDir}/jacoco/test.exec"))
    additionalSourceDirs(files("src/commonMain/kotlin"))
    additionalSourceDirs(files("src/jvmMain/kotlin"))
}


project.group = csenseGroupId
project.version = csenseVersionName

apply from: "$rootDir/gradle/dokka.gradle"
apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "publish"])


benchmark {
    targets {
        register("jvm") {
            jmhVersion = "1.23" // available only for JVM compilations & Java source sets
        }

    }
}
