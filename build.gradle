buildscript {

    //https://github.com/Kotlin/kotlinx.coroutines
    ext.coroutinesVersion = "1.6.0-RC2"
    //https://github.com/csense-oss/csense-kotlin-test
    ext.csenseTestsVersion = "0.0.52"
    //https://github.com/csense-oss/csense-kotlin-annotations
    ext.csenseAnnotationVersion = "0.0.50"

    //https://github.com/JetBrains/kotlin/releases
    ext.kotlin_version = "1.6.10"

    //https://github.com/Kotlin/kotlinx-benchmark
    ext.kotlinx_benchmark_version = "0.4.0"

    ext.junit5Version = "5.8.2"
    ext.csenseAnnotationVersion = "0.0.50"
    ext.useCsenseVersion = "0.0.52"


    //library settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"
    ext.csenseVersionName = "0.0.50"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin-datastructures-algorithms"
    ext.csenseGithub = "csense-oss/csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-datastructures-algorithms"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-datastructures-algorithms.git"
    ext.csenseArtifactDescription = ""
    //end library settings
}


plugins {
    //https://github.com/JetBrains/kotlin
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlin_version"
    id "maven-publish"
    //https://github.com/Kotlin/kotlinx-benchmark
    id 'org.jetbrains.kotlinx.benchmark' version "$kotlinx_benchmark_version"
    //https://github.com/jeremylong/DependencyCheck https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id "org.owasp.dependencycheck" version "6.5.0.1"
}


repositories {
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/csense-oss/csense-oss/_packaging/csense-oss/maven/v1'
        name 'csense-oss'
    }
}


kotlin {
    explicitApi = 'strict'
    jvm()
    js(LEGACY) {
        browser {
        }
        nodejs {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin:$useCsenseVersion"
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-tests:$csenseTestsVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-benchmark-runtime:$kotlinx_benchmark_version"
            }
        }
        jvmMain {
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlin:kotlin-reflect"
            }
        }

        jsMain {

        }
        jsTest {

        }
        all {
            languageSettings.enableLanguageFeature("InlineClasses")
        }
    }
}

kotlin.sourceSets.all {
    languageSettings.progressiveMode = true
}


jvmTest {

    testLogging {
        showStandardStreams = true
        events "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}


project.group = csenseGroupId
project.version = csenseVersionName

apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "publish"])


benchmark {
    targets {
        register("jvmTest") {
            jmhVersion = "1.33" // available only for JVM compilations & Java source sets
        }
    }
}
